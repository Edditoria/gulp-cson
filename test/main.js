const fs = require('fs');
const path = require('path');
const should = require('should');
const Vinyl = require('vinyl');
const gcson = require('../');

require('mocha');

describe('gulp-cson', function() {
  it('should parse cson to json', function(done) {
    const myFunction = gcson({
      indent: null
    });
    const fakeFile = new Vinyl({
      base: 'test/fixtures',
      cwd: 'test/',
      path: 'test/fixtures/normal.cson',
      contents: fs.readFileSync(path.join(__dirname, '/fixtures/normal.cson'))
    });
    myFunction.once('data', function(newFile) {
      should.exist(newFile);
      should.exist(newFile.contents);
      should.equal(newFile.path.replace(/\\/g, '/'), 'test/fixtures/normal.json');
      String(newFile.contents).should.equal(String(fs.readFileSync(path.join(__dirname, '/expected/normal.json'))));
      return done();
    });
    return myFunction.write(fakeFile);
  });
  it('should parse cson to json with indent', function(done) {
    const myFunction = gcson();
    const fakeFile = new Vinyl({
      base: 'test/fixtures',
      cwd: 'test/',
      path: 'test/fixtures/normal.cson',
      contents: fs.readFileSync(path.join(__dirname, '/fixtures/normal.cson'))
    });
    myFunction.once('data', function(newFile) {
      should.exist(newFile);
      should.exist(newFile.contents);
      should.equal(newFile.path.replace(/\\/g, '/'), 'test/fixtures/normal.json');
      String(newFile.contents).should.equal(String(fs.readFileSync(path.join(__dirname, '/expected/normal-indent.json'))));
      return done();
    });
    return myFunction.write(fakeFile);
  });
  return it('should return error on error', function(done) {
    const myFunction = gcson();
    const fakeFile = new Vinyl({
      base: 'test/fixtures',
      cwd: 'test/',
      path: 'test/fixtures/normal.cson',
      contents: fs.readFileSync(path.join(__dirname, '/fixtures/error.cson'))
    });
    myFunction.once('error', function(err) {
      should.exist(err);
      should.equal(err.name, 'SyntaxError');
      should.equal(err.message, 'unmatched }');
      return done();
    });
    return myFunction.write(fakeFile);
  });
});

// ---
// generated by coffee-script 1.9.2
